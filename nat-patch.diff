diff --git a/src/plugins/nat/out2in.c b/src/plugins/nat/out2in.c
index 8c013d9b0..d229b7f17 100755
--- a/src/plugins/nat/out2in.c
+++ b/src/plugins/nat/out2in.c
@@ -34,6 +34,8 @@
 #include <vppinfra/error.h>
 #include <vppinfra/elog.h>
 
+#include <vnet/classify/policer_classify.h>
+
 typedef struct
 {
   u32 sw_if_index;
@@ -103,6 +105,7 @@ typedef enum
   SNAT_OUT2IN_NEXT_LOOKUP,
   SNAT_OUT2IN_NEXT_ICMP_ERROR,
   SNAT_OUT2IN_NEXT_REASS,
+  SNAT_OUT2IN_NEXT_POLICER_CLASSIFY,
   SNAT_OUT2IN_N_NEXT,
 } snat_out2in_next_t;
 
@@ -1086,6 +1089,8 @@ snat_out2in_node_fn (vlib_main_t * vm,
 	  snat_session_t *s0 = 0;
 	  clib_bihash_kv_8_8_t kv0, value0;
 	  u8 identity_nat0;
+          vlib_node_t *ip4_policer_classify_node = NULL;
+          policer_classify_main_t *pcm = &policer_classify_main;
 
 	  /* speculatively enqueue b0 to the current next frame */
 	  bi0 = from[0];
@@ -1110,6 +1115,20 @@ snat_out2in_node_fn (vlib_main_t * vm,
 
 	  proto0 = ip_proto_to_snat_proto (ip0->protocol);
 
+          ip4_policer_classify_node =
+            vlib_get_node_by_name (vm, (u8 *) "ip4-policer-classify");
+          if (ip4_policer_classify_node)
+            {
+              if (pcm->classify_table_index_by_sw_if_index
+                           [POLICER_CLASSIFY_TABLE_IP4][sw_if_index0] != ~0)
+                {
+                   /* feature is enabled */
+                   next0 = SNAT_OUT2IN_NEXT_POLICER_CLASSIFY;
+                   vlib_node_add_next (vm, ip4_policer_classify_node->index,
+                                       next0);
+                }
+            }
+
 	  if (PREDICT_FALSE (proto0 == ~0))
 	    {
 	      if (nat_out2in_sm_unknown_proto (sm, b0, ip0, rx_fib_index0))
@@ -1295,6 +1314,7 @@ VLIB_REGISTER_NODE (snat_out2in_node) = {
     [SNAT_OUT2IN_NEXT_LOOKUP] = "ip4-lookup",
     [SNAT_OUT2IN_NEXT_ICMP_ERROR] = "ip4-icmp-error",
     [SNAT_OUT2IN_NEXT_REASS] = "nat44-out2in-reass",
+    [SNAT_OUT2IN_NEXT_POLICER_CLASSIFY] = "ip4-policer-classify",
   },
 };
 /* *INDENT-ON* */
@@ -1343,6 +1363,10 @@ nat44_out2in_reass_node_fn (vlib_main_t * vm,
 	  u16 old_port0, new_port0;
 	  ip_csum_t sum0;
 	  u8 identity_nat0;
+          vlib_node_t *ip4_policer_classify_node = NULL;
+          policer_classify_main_t *pcm = &policer_classify_main;
+
+
 
 	  /* speculatively enqueue b0 to the current next frame */
 	  bi0 = from[0];
@@ -1360,6 +1384,20 @@ nat44_out2in_reass_node_fn (vlib_main_t * vm,
 	    fib_table_get_index_for_sw_if_index (FIB_PROTOCOL_IP4,
 						 sw_if_index0);
 
+          ip4_policer_classify_node =
+            vlib_get_node_by_name (vm, (u8 *) "ip4-policer-classify");
+          if (ip4_policer_classify_node)
+            {
+              if (pcm->classify_table_index_by_sw_if_index
+                           [POLICER_CLASSIFY_TABLE_IP4][sw_if_index0] != ~0)
+                {
+                   next0 = SNAT_OUT2IN_NEXT_POLICER_CLASSIFY;
+                   vlib_node_add_next (vm, ip4_policer_classify_node->index,
+                                       next0);
+
+                }
+            }
+
 	  if (PREDICT_FALSE (nat_reass_is_drop_frag (0)))
 	    {
 	      next0 = SNAT_OUT2IN_NEXT_DROP;
@@ -1628,6 +1666,7 @@ VLIB_REGISTER_NODE (nat44_out2in_reass_node) = {
     [SNAT_OUT2IN_NEXT_LOOKUP] = "ip4-lookup",
     [SNAT_OUT2IN_NEXT_ICMP_ERROR] = "ip4-icmp-error",
     [SNAT_OUT2IN_NEXT_REASS] = "nat44-out2in-reass",
+    [SNAT_OUT2IN_NEXT_POLICER_CLASSIFY] = "ip4-policer-classify",
   },
 };
 /* *INDENT-ON* */
@@ -1670,6 +1709,9 @@ snat_out2in_fast_node_fn (vlib_main_t * vm,
 	  snat_session_key_t key0, sm0;
 	  u32 proto0;
 	  u32 rx_fib_index0;
+          vlib_node_t *ip4_policer_classify_node = NULL;
+          policer_classify_main_t *pcm = &policer_classify_main;
+
 
 	  /* speculatively enqueue b0 to the current next frame */
 	  bi0 = from[0];
@@ -1692,6 +1734,19 @@ snat_out2in_fast_node_fn (vlib_main_t * vm,
 
 	  vnet_feature_next (&next0, b0);
 
+          ip4_policer_classify_node =
+            vlib_get_node_by_name (vm, (u8 *) "ip4-policer-classify");
+          if (ip4_policer_classify_node)
+            {
+              if (pcm->classify_table_index_by_sw_if_index
+                           [POLICER_CLASSIFY_TABLE_IP4][sw_if_index0] != ~0)
+                {
+                  next0 = SNAT_OUT2IN_NEXT_POLICER_CLASSIFY;
+                  vlib_node_add_next (vm, ip4_policer_classify_node->index,
+                                      next0);
+                }
+            }
+
 	  if (PREDICT_FALSE (ip0->ttl == 1))
 	    {
 	      vnet_buffer (b0)->sw_if_index[VLIB_TX] = (u32) ~ 0;
@@ -1822,6 +1877,7 @@ VLIB_REGISTER_NODE (snat_out2in_fast_node) = {
     [SNAT_OUT2IN_NEXT_DROP] = "error-drop",
     [SNAT_OUT2IN_NEXT_ICMP_ERROR] = "ip4-icmp-error",
     [SNAT_OUT2IN_NEXT_REASS] = "nat44-out2in-reass",
+    [SNAT_OUT2IN_NEXT_POLICER_CLASSIFY] = "ip4-policer-classify",
   },
 };
 /* *INDENT-ON* */
diff --git a/src/vnet/ip/ip4_forward.c b/src/vnet/ip/ip4_forward.c
index 9dac828a7..e9a990064 100644
--- a/src/vnet/ip/ip4_forward.c
+++ b/src/vnet/ip/ip4_forward.c
@@ -753,7 +753,7 @@ VNET_FEATURE_INIT (ip4_policer_classify, static) =
 {
   .arc_name = "ip4-unicast",
   .node_name = "ip4-policer-classify",
-  .runs_before = VNET_FEATURES ("ipsec-input-ip4"),
+  .runs_before = VNET_FEATURES ("ipsec-input-ip4","nat44-in2out","nat44-out2in"),
 };
 
 VNET_FEATURE_INIT (ip4_ipsec, static) =
